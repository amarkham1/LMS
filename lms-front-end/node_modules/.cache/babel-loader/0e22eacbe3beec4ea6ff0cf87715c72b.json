{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Css = require('./Css');\n\nvar _Css2 = _interopRequireDefault(_Css);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar instances = 0;\n\nvar DropdownMenu = function (_React$Component) {\n  _inherits(DropdownMenu, _React$Component);\n\n  function DropdownMenu() {\n    _classCallCheck(this, DropdownMenu);\n\n    var _this = _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).call(this));\n\n    _this.toggleMenu = _this.toggleMenu.bind(_this);\n    instances += 1;\n    _this.MENUITEMS_DIV = '__react_bs_dd_menuItems_' + instances;\n    _this.CARAT_CLASS = '__react_bs_dd_carat_' + instances;\n    _this.TRIGGER_CLASS = '__react_bs_dd_trigger_' + instances;\n    return _this;\n  }\n\n  _createClass(DropdownMenu, [{\n    key: 'toggleMenu',\n    value: function toggleMenu(e) {\n      var items = document.getElementById(this.MENUITEMS_DIV);\n\n      if (items) {\n        items.classList.toggle(\"show\");\n\n        if (this.props.fadeIn && this.props.fadeIn == \"true\") {\n          this.fadeIn(document.getElementById(this.MENUITEMS_DIV));\n        }\n\n        this.toggleArrow(e);\n      }\n    }\n  }, {\n    key: 'toggleArrow',\n    value: function toggleArrow(e) {\n      var carat = document.getElementById(this.CARAT_CLASS);\n\n      if (carat) {\n        if (carat.className === \"glyphicon glyphicon-triangle-top\") {\n          carat.className = \"glyphicon glyphicon-triangle-bottom\";\n        } else {\n          carat.className = \"glyphicon glyphicon-triangle-top\";\n        }\n      }\n    }\n  }, {\n    key: 'fadeIn',\n    value: function fadeIn(element) {\n      element.style.opacity = 0;\n\n      var tick = function tick() {\n        element.style.opacity = +element.style.opacity + 0.04;\n\n        if (+element.style.opacity < 1) {\n          window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);\n        }\n      };\n\n      tick();\n    }\n  }, {\n    key: 'showLoggedInUserName',\n    value: function showLoggedInUserName() {\n      if (this.props.userName) {\n        return _react2.default.createElement('div', null, _react2.default.createElement('p', null, 'Logged in as: ', _react2.default.createElement('br', null), _react2.default.createElement('strong', null, this.props.userName)), _react2.default.createElement('hr', {\n          style: _Css2.default.separator\n        }));\n      }\n    }\n  }, {\n    key: 'getTrigger',\n    value: function getTrigger() {\n      if (this.props.triggerType && this.props.trigger) {\n        switch (this.props.triggerType.toLowerCase()) {\n          case \"image\":\n            var triggerStyle = _Css2.default.imageTrigger;\n            var caratStyle = _Css2.default.triangle;\n\n            if (this.props.triggerWidth) {\n              triggerStyle.width = this.props.triggerWidth;\n            }\n\n            if (this.props.triggerHeight) {\n              triggerStyle.height = this.props.triggerHeight;\n            }\n\n            if (this.props.caratColor) {\n              caratStyle.color = this.props.caratColor;\n            }\n\n            return _react2.default.createElement('div', {\n              onClick: this.toggleMenu\n            }, _react2.default.createElement('img', {\n              src: this.props.trigger,\n              style: triggerStyle,\n              className: this.TRIGGER_CLASS\n            }), _react2.default.createElement('span', {\n              id: this.CARAT_CLASS,\n              className: 'glyphicon glyphicon-triangle-bottom',\n              style: caratStyle\n            }));\n\n          case \"text\":\n            return _react2.default.createElement('div', {\n              className: this.TRIGGER_CLASS,\n              onClick: this.toggleMenu,\n              style: _Css2.default.textTrigger\n            }, this.props.trigger, '\\xA0\\xA0', _react2.default.createElement('span', {\n              id: this.CARAT_CLASS,\n              className: 'glyphicon glyphicon-triangle-bottom',\n              style: caratStyle\n            }));\n\n          case \"icon\":\n            return _react2.default.createElement('span', {\n              className: this.props.trigger,\n              style: _Css2.default.gear,\n              onClick: this.toggleMenu\n            });\n\n          default:\n            throw \"The value for DropdownMenu 'triggerType' is not supported for DropdownMenu. Try 'image', 'text' or 'icon'.\";\n        }\n      } else {\n        return _react2.default.createElement('span', {\n          className: 'glyphicon glyphicon-cog',\n          style: _Css2.default.gear,\n          onClick: this.toggleMenu\n        });\n      }\n    }\n  }, {\n    key: 'getMenuStyle',\n    value: function getMenuStyle() {\n      var menuStyle = JSON.parse(JSON.stringify(_Css2.default.menuContent)); // Clone the current style\n\n      var position = this.props.position === undefined ? 'right' : this.props.position;\n      var supportedPositions = ['left', 'center', 'right'];\n\n      if (supportedPositions.indexOf(position.toLowerCase()) === -1) {\n        throw \"The value for 'position' prop is not supported for DropdownMenu. Try 'left', 'center' or 'right'.\";\n      }\n\n      if (position) {\n        var baseWidth = parseInt(_Css2.default.menuContent.minWidth.replace('px', ''));\n        var offset = 0;\n        baseWidth = baseWidth - 40; // We need to use negative numbers as we are offsetting menu to the left\n\n        if (position === \"center\") {\n          offset = baseWidth / 2 * -1;\n        }\n\n        if (position === \"left\") {\n          offset = baseWidth * -1;\n        }\n\n        menuStyle.left = offset.toString() + 'px';\n      }\n\n      return menuStyle;\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var TRIGGER_CLASS = this.TRIGGER_CLASS;\n      var MENUITEMS_DIV = this.MENUITEMS_DIV;\n      var CARAT_CLASS = this.CARAT_CLASS;\n      window.addEventListener(\"click\", function (e) {\n        var klass = e.target.className;\n        var carat = document.getElementById(CARAT_CLASS);\n\n        if (klass !== MENUITEMS_DIV + \" show\" && klass !== TRIGGER_CLASS && !klass.lastIndexOf(\"glyphicon\", 0) == 0) {\n          var menuItemDiv = document.getElementById(MENUITEMS_DIV);\n\n          if (menuItemDiv) {\n            menuItemDiv.classList.remove('show');\n\n            if (carat) {\n              carat.className = \"glyphicon glyphicon-triangle-bottom\";\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (this.props.children.length === 0) {\n        throw \"DropdownMenu must have at least one MenuItem child.\";\n      }\n\n      return _react2.default.createElement('div', {\n        style: _Css2.default.menu\n      }, this.getTrigger(), _react2.default.createElement('div', {\n        id: this.MENUITEMS_DIV,\n        className: this.MENUITEMS_DIV,\n        style: this.getMenuStyle()\n      }, this.showLoggedInUserName(), this.props.children));\n    }\n  }]);\n\n  return DropdownMenu;\n}(_react2.default.Component);\n\n;\nexports.default = DropdownMenu;","map":null,"metadata":{},"sourceType":"script"}